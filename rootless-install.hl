//!/bin/sh
${set -e}
// Docker CE for Linux installation script (Rootless mode)
//
// See https://docs.docker.com/go/rootless/ for the
// installation steps.
//
// This script is meant for quick & easy install via:
//   $ curl -fsSL https://get.docker.com/rootless -o get-docker.sh
//   $ sh get-docker.sh
//
// NOTE: Make sure to verify the contents of the script
//       you downloaded matches the contents of install.sh
//       located at https://github.com/docker/docker-install
//       before executing.
//
// Git commit from https://github.com/docker/docker-install when
// the script was uploaded (Should only be modified by upload job):
var SCRIPT_COMMIT_SHA="UNKNOWN"

// This script should be run with an unprivileged user and install/setup Docker under $HOME/bin/.

// latest version available in the stable channel.
var STABLE_LATEST="28.0.4"

// latest version available in the test channel.
var TEST_LATEST="28.0.4"

// The channel to install from:
//   * test
//   * stable
var DEFAULT_CHANNEL_VALUE="stable"
$CHANNEL ??= $DEFAULT_CHANNEL_VALUE

var STATIC_RELEASE_URL: str?
var STATIC_RELEASE_ROOTLESS_URL: str?
match $CHANNEL {
	"stable" => {
		echo "# Installing stable version ${STABLE_LATEST}"
		$STATIC_RELEASE_URL="https://download.docker.com/linux/static/$CHANNEL/$(uname -m)/docker-${STABLE_LATEST}.tgz"
		$STATIC_RELEASE_ROOTLESS_URL="https://download.docker.com/linux/static/$CHANNEL/$(uname -m)/docker-rootless-extras-${STABLE_LATEST}.tgz"
	},
	"test" => {
        echo "# Installing test version ${TEST_LATEST}"
        $STATIC_RELEASE_URL="https://download.docker.com/linux/static/$CHANNEL/$(uname -m)/docker-${TEST_LATEST}.tgz"
        $STATIC_RELEASE_ROOTLESS_URL="https://download.docker.com/linux/static/$CHANNEL/$(uname -m)/docker-rootless-extras-${TEST_LATEST}.tgz"
	},
	_ => throw "Aborting because of unknown CHANNEL \"$CHANNEL\". Set \$CHANNEL to either \"stable\" or \"test\"."
}

fn init_vars() {
	var BIN="${DOCKER_BIN:-$HOME/bin}"

	var DAEMON: Command = dockerd
	var SYSTEMD: num?
	if $(systemctl --user daemon-reload >f"/dev/null" $stderr>$stdout) {
		$SYSTEMD=1
	}
}

fn checks() {
	// OS verification: Linux only, point osx/win to helpful locations
	match $(uname) {
		"Linux" => {},
		_ => throw "Rootless Docker cannot be installed on $(uname)"
	}

	// User verification: deny running as root (unless forced?)
	if $(id -u) == 0 && $FORCE_ROOTLESS_INSTALL == null {
		throw "Refusing to install rootless Docker as the root user"
	}

	// HOME verification
	if !f"$HOME".exist() {
		throw "Aborting because HOME directory $HOME does not exist"
	}

	let bin: File = f"$BIN"
	if $bin.exist() {
		if !$bin.writable() {
			throw "Aborting because $BIN is not writable"
		}
	} else {
		if !$bin.writable() {
			throw "Aborting because HOME (\"$HOME\") is not writable"
		}
	}

	// Existing rootful docker verification
	if f"/var/run/docker.sock".writable() && $FORCE_ROOTLESS_INSTALL == null {
		throw "Aborting because rootful Docker is running and accessible. Set FORCE_ROOTLESS_INSTALL=1 to ignore."
	}

	// Validate XDG_RUNTIME_DIR
	if !f"$XDG_RUNTIME_DIR".writable() {
		throw """Aborting because systemd was detected but XDG_RUNTIME_DIR (\"$XDG_RUNTIME_DIR\") does not exist or is not writable
Hint: this could happen if you changed users with 'su' or 'sudo'. To work around this:
- try again by first running with root privileges 'loginctl enable-linger <user>' where <user> is the unprivileged user and export XDG_RUNTIME_DIR to the value of RuntimePath as shown by 'loginctl show-user <user>'
- or simply log back in as the desired unprivileged user (ssh works for remote machines)
"""
	}

	// Already installed verification (unless force?). Only having docker cli binary previously shouldn't fail the build.
	if f"$BIN/$DAEMON".executable() {
		// If rootless installation is detected print out the modified PATH and DOCKER_HOST that needs to be set.
		std::echo """# Existing rootless Docker detected at $BIN/$DAEMON

# To reinstall or upgrade rootless Docker, run the following commands and then rerun the installation script:
systemctl --user stop docker
rm -f $BIN/$DAEMON

# Alternatively, install the docker-ce-rootless-extras RPM/deb package for ease of package management (requires root).
# See https://docs.docker.com/go/rootless/ for details.
"""
		exit 0
	}

	let INSTRUCTIONS: Command?

	// uidmap dependency check
	let dev_null: File = f"/dev/null"
	if ! $(command -v newuidmap >$dev_null $stderr>$stdout) {
		if $(command -v apt-get >$dev_null $stderr>$stdout) {
			$INSTRUCTIONS="apt-get -y install uidmap"
		} else if $(command -v dnf >$dev_null $stderr>$stdout) {
			$INSTRUCTIONS="dnf -y install shadow-utils"
		} else if $(command -v yum >$dev_null $stderr>$stdout) {
			$INSTRUCTIONS="curl -o /etc/yum.repos.d/vbatts-shadow-utils-newxidmap-epel-7.repo https://copr.fedorainfracloud.org/coprs/vbatts/shadow-utils-newxidmap/repo/epel-7/vbatts-shadow-utils-newxidmap-epel-7.repo
yum -y install shadow-utils46-newxidmap"			
		} else {
			throw "newuidmap binary not found. Please install with a package manager."
		}
	}

	// iptables dependency check
	if $SKIP_IPTABLES == null && ! $(command -v iptables >$dev_null $stderr>$stdout) && !f"/sbin/iptables".is_dir() && !f"/usr/sbin/iptables".is_dir() {
		if $(command -v apt-get > $dev_null $stderr>$stdout) {
			$INSTRUCTIONS="${INSTRUCTIONS}
apt-get -y install iptables"
		} else if $(command -v dnf > $dev_null $stderr>$stdout) {
			$INSTRUCTIONS="${INSTRUCTIONS}
dnf -y install iptables"
		} else {
			throw "iptables binary not found. Please install with a package manager."
		}
	}

	// ip_tables module dependency check
	if $SKIP_IPTABLES == null && ! $(lsmod  | grep ip_tables >$dev_null $stderr>$stdout)
		&& ! $(grep -q ip_tables "/lib/modules/$(uname -r)/modules.builtin") {
			INSTRUCTIONS="${INSTRUCTIONS}
modprobe ip_tables"
		}

	// debian requires setting unprivileged_userns_clone
	if $unprivileged_userns_clone := f"/proc/sys/kernel/unprivileged_userns_clone";
		$unprivileged_userns_clone.is_dir() {
		if "1" != $(cat $unprivileged_userns_clone) {
			$INSTRUCTIONS="""${INSTRUCTIONS}
cat <<EOT > /etc/sysctl.d/50-rootless.conf
kernel.unprivileged_userns_clone = 1
EOT
sysctl --system"""
		}
	}

	// centos requires setting max_user_namespaces
	if $max_user_namespaces := f"/proc/sys/user/max_user_namespaces"; 
		!$max_user_namespaces.is_dir() {
		if "0" == $(cat $max_user_namespaces) {
			$INSTRUCTIONS="${INSTRUCTIONS}
cat <<EOT > /etc/sysctl.d/51-rootless.conf
user.max_user_namespaces = 28633
EOT
sysctl --system"
		}
	}

	if $INSTRUCTIONS {
		throw """# Missing system requirements. Please run following commands to
# install the requirements and run this installer again.
# Alternatively iptables checks can be disabled with SKIP_IPTABLES=1

cat <<EOF | sudo sh -x
INSTRUCTIONS
EOF
"""
	}

	// validate subuid/subgid files for current user
	if ! $(grep "^$(id -un):\|^$(id -u):" f"/etc/subuid" >$dev_null $stderr>$stdout) {
		throw """Could not find records for the current user $(id -un) from /etc/subuid . Please make sure valid subuid range is set there.
For example:
echo \"$(id -un):100000:65536\" >> /etc/subuid"""
	}
	if ! $(grep "^$(id -un):\|^$(id -u):" f"/etc/subgid" >$dev_null $stderr>$stdout) {
		throw """Could not find records for the current user $(id -un) from /etc/subgid . Please make sure valid subuid range is set there.
For example:
echo \"$(id -un):100000:65536\" >> /etc/subgid"""
	}
}

fn exec_setuptool() {
	if $FORCE_ROOTLESS_INSTALL {
		set -- "$@" --force
	}

	if $SKIP_IPTABLES {
		set -- "$@" --skip-iptables
	}

	(
		set -x
		PATH="$BIN:$PATH" "$BIN/dockerd-rootless-setuptool.sh" install "$@"
	)
}

fn do_install() {
	echo "# Executing docker rootless install script, commit: $SCRIPT_COMMIT_SHA"

	init_vars
	checks

	tmp=$(mktemp -d)
	trap 'rm -rf "$tmp"' EXIT INT TERM
	// Download tarballs docker-* and docker-rootless-extras=*
	(
		cd "$tmp"
		curl -L -o docker.tgz "$STATIC_RELEASE_URL"
		curl -L -o rootless.tgz "$STATIC_RELEASE_ROOTLESS_URL"
	)
	// Extract under $HOME/bin/
	(
		mkdir -p "$BIN"
		cd "$BIN"
		tar zxf "$tmp/docker.tgz" --strip-components=1
		tar zxf "$tmp/rootless.tgz" --strip-components=1
	)

	exec_setuptool "$@"
}

do_install "$@"